-- Demonstration of spawning at random locations on maps generated by text

local PI = 3.14159265359

local DEFAULT_MAP = [[
************
*    *     *
*    *     *
*          *
*    *     *
*    *     *
*** **** ***
*    *     *
*       P  *
*    *     *
*    *     *
************
]]

local DEFAULT_VARIATION_LAYER = [[
            
 AAAA BBBBB 
 AAAA BBBBB 
 AAAA BBBBB 
 AAAA BBBBB 
 AAAA BBBBB 
            
 CCCC DDDDD 
 CCCC DDDDD 
 CCCC DDDDD 
 CCCC DDDDD 
            
]]

local game = require 'dmlab.system.game'
local SCREEN = game:screenShape()
local SHAPE = SCREEN.buffer

local make_map = require 'common.make_map'
local pickups = require 'common.pickups'
local texture_sets = require 'themes.texture_sets'
local custom_observations = require 'decorators.custom_observations'
local property_decorator = require 'decorators.property_decorator'

local api = {
  _properties = {
    spawn_pose = {
      x='150', 
      y='150',
      z='51',
      theta='0'
    },
    goal_position = {
      x='250',
      y='250'
    },
    view_pose = {
      x='150', 
      y='150',
      z='51',
      yaw='0',
      pitch='0',
      theta='0'
    }
  }
}

property_decorator.decorate(api)
property_decorator.addReadWrite('params', api._properties)

-- Called only once at start up. Settings not recognised by DM Lab internal
-- are forwarded through the params dictionary.
function api:init(params)
  params.text_map = params.text_map or DEFAULT_MAP
  params.variations = params.variations or DEFAULT_VARIATION_LAYER

  -- Seed the map so only one map is created with lights and decals placed in
  -- the same place each run.
  make_map.random():seed(1)
  api._map = make_map.makeMap{
      mapName = "demo_map_settings",
      mapEntityLayer = params.text_map,
      mapVariationsLayer = params.variations,
      decalFrequency = 0.9,
      useSkybox = true,
      textureSet = texture_sets.CUSTOMIZABLE_FLOORS
  }
end

-- `make_map` has default pickup types A = apple_reward and G = goal.
-- This callback is used to create pickups with those names.
function api:createPickup(classname)
  return pickups.defaults[classname]
end

-- On first call we return the name of the map. On subsequent calls we return
-- an empty string. This informs the engine to only perform a quik map restart
-- instead.
function api:nextMap()
  local mapName = api._map
  api._map = ''
  return mapName
end

function api:updateSpawnVars(spawnVars)
  if spawnVars.classname == "info_player_start" then
    -- spawnVars.origin is a string of the form "X Y Z"
    spawnVars.origin = api._properties.spawn_pose.x .. " " .. api._properties.spawn_pose.y .. " " .. api._properties.spawn_pose.z
    
    -- convert to degrees
    local degrees = tonumber(api._properties.spawn_pose.theta)*180/PI
    spawnVars.angle = tostring(degrees)
    spawnVars.randomAngleRange = "0"
  elseif spawnVars.classname == "apple_reward" then
    -- use default height of 30
    spawnVars.origin = api._properties.goal_position.x .. " " .. api._properties.goal_position.y .. " 30"
  end
  return spawnVars
end

-- add custom observations, this adds all DEBUG observations~~~
custom_observations.decorate(api)

return api


